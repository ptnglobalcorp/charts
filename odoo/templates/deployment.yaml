apiVersion: {{ template "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ template "common.names.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 4 }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  {{- $podLabels := include "common.tplvalues.merge" ( dict "values" ( list .Values.podLabels .Values.commonLabels ) "context" . ) }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" ( dict "customLabels" $podLabels "context" $ ) | nindent 6 }}
  {{- if .Values.updateStrategy }}
  strategy: {{- toYaml .Values.updateStrategy | nindent 4 }}
  {{- end }}
  template:
    metadata:
      labels: {{- include "common.labels.standard" ( dict "customLabels" $podLabels "context" $ ) | nindent 8 }}
      {{- if .Values.podAnnotations }}
      annotations: {{- include "common.tplvalues.render" (dict "value" .Values.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
    spec:
      serviceAccountName: {{ template "odoo.serviceAccountName" . }}
      automountServiceAccountToken: {{ .Values.automountServiceAccountToken }}
      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAntiAffinityPreset "customLabels" $podLabels "context" $) | nindent 10 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.podSecurityContext "context" $) | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ template "common.names.fullname" . }}
          image: {{ template "odoo.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.containerSecurityContext "context" $) | nindent 12 }}
          {{- end }}
          env:
            - name: BITNAMI_DEBUG
              value: {{ ternary "true" "false" .Values.image.debug | quote }}
            - name: ALLOW_EMPTY_PASSWORD
              value: {{ ternary "yes" "no" .Values.allowEmptyPassword | quote }}
            - name: ODOO_DATABASE_HOST
              value: {{ template "odoo.databaseHost" . }}
            - name: ODOO_DATABASE_PORT_NUMBER
              value: {{ template "odoo.databasePort" . }}
            - name: ODOO_DATABASE_NAME
              value: {{ template "odoo.databaseName" . }}
            - name: ODOO_DATABASE_FILTER
              value: {{ .Values.odooDatabaseFilter | quote }}
            - name: ODOO_DATABASE_USER
              value: {{ template "odoo.databaseUser" . }}
            - name: ODOO_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "odoo.databaseSecretName" . }}
                  key: {{ include "odoo.databaseSecretPasswordKey" . }}
            - name: ODOO_EMAIL
              value: {{ .Values.odooEmail | quote }}
            - name: ODOO_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "odoo.secretName" . }}
                  key: odoo-password
            - name: ODOO_SKIP_BOOTSTRAP
              value: {{ ternary "yes" "no" .Values.odooSkipInstall | quote }}
            - name: ODOO_LOAD_DEMO_DATA
              value: {{ ternary "yes" "no" .Values.loadDemoData | quote }}
          ports:
            - name: http
              containerPort: {{ .Values.containerPorts.http }}
          {{- if not .Values.diagnosticMode.enabled }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.livenessProbe "enabled" "path") "context" $) | nindent 12 }}
            tcpSocket:
              port: http
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.readinessProbe "enabled" "path") "context" $) | nindent 12 }}
            httpGet:
              path: {{ .Values.readinessProbe.path }}
              port: http
          {{- end }}
          {{- end }}
          {{- if .Values.resources }}
          resources: {{- toYaml .Values.resources | nindent 12 }}
          {{- else if ne .Values.resourcesPreset "none" }}
          resources: {{- include "common.resources.preset" (dict "type" .Values.resourcesPreset) | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: {{ .Values.persistence.volumeName }}
              mountPath: /bitnami/odoo
      volumes:
        - name: {{ .Values.persistence.volumeName }}
          {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            {{- if not .Values.persistence.dynamicVolumeProvisioning.enabled  }}
            claimName: {{ .Values.persistence.dynamicVolumeProvisioning.pvcName }}
            {{- else }}
            claimName: {{ (tpl .Values.persistence.existingClaim $) | default (include "common.names.fullname" .) }}
            {{- end }}
          {{- else }}
          emptyDir: {}
          {{- end }}
